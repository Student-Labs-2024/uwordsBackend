---
- 
  name: Install pip and docker
  become: true 

  ansible.builtin.apt:
    pkg:
      - python3-pip
      - docker
      - docker-compose
- 
  name: Install docker's python packages
  become: true 

  ansible.builtin.pip:
    name:
      - docker
      - docker-compose
- 
  name: Log into DockerHub
  become: true 

  community.docker.docker_login:
    username: "{{ DOCKERHUB_USERNAME }}"
    password: "{{ DOCKERHUB_TOKEN }}"
    reauthorize: true
- 
  name: Remove Unknown
  become: true

  command:
    cmd: "sudo aa-remove-unknown"
-
  name: Pull the Docker image
  become: true 

  command: 
    cmd: "docker pull {{ IMAGE }}"
- 
  name: Run server
  become: true 

  community.docker.docker_compose:
    project_name: "{{ project_name }}"
    definition:
      version: '3.8'
      services:
        app:
          image: "{{ IMAGE }}"
          container_name: uwords_fastapi_app
          environment:
            POSTGRES_DB: "{{ POSTGRES_DB }}"
            POSTGRES_HOST: "{{ POSTGRES_HOST }}"
            POSTGRES_PORT: "{{ POSTGRES_PORT }}"
            POSTGRES_USER: "{{ POSTGRES_USER }}"
            POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"

            CELERY_BROKER_URL: "{{ CELERY_BROKER_URL }}"
            CELERY_RESULT_BACKEND: "{{ CELERY_RESULT_BACKEND }}"

            MINIO_ENDPOINT: "{{ MINIO_ENDPOINT }}"
            MINIO_ROOT_USER: "{{ MINIO_ROOT_USER }}"
            MINIO_ROOT_PASSWORD: "{{ MINIO_ROOT_PASSWORD }}"
            MINIO_BUCKET_NAME: "{{ MINIO_BUCKET_NAME }}"
            MINIO_BUCKET_VOICEOVER: "{{ MINIO_BUCKET_VOICEOVER }}"
            MINIO_BUCKET_PICTURE: "{{ MINIO_BUCKET_PICTURE }}"

            GPT_TOKEN: "{{ GPT_TOKEN }}"

            PIX_TOKEN: "{{ PIX_TOKEN }}"

            MINIO_HOST: "{{ MINIO_HOST }}"

          logging:
            options:
              max-size: "10m"
              max-file: "3"
          ports:
          - "127.0.0.1:8001:8000" 
          entrypoint: >
            /bin/sh -c "
            alembic -c src/alembic.ini upgrade head;
            uvicorn src.main:app --reload --proxy-headers --host 0.0.0.0 --port 8000 --workers 4
            "
          depends_on:
          - db
          - redis
          restart: always

        db:
          image: postgres:latest
          container_name: uwords_fastapi_db
          volumes:
            - "/{{ project_name }}_postgres-data:/var/lib/postgresql/data"
          environment:
            POSTGRES_DB: "{{ POSTGRES_DB }}"
            POSTGRES_USER: "{{ POSTGRES_USER }}"
            POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
          ports:
            - "127.0.0.1:5432:5432"
          restart: always

        redis:
          image: redis:latest
          command: redis-server
          restart: always
          ports:
            - "127.0.0.1:6379:6379"

        worker:
          image: "{{ IMAGE }}"
          command: celery -A src.config.celery_app worker --loglevel=info
          environment:
            POSTGRES_DB: "{{ POSTGRES_DB }}"
            POSTGRES_HOST: "{{ POSTGRES_HOST }}"
            POSTGRES_PORT: "{{ POSTGRES_PORT }}"
            POSTGRES_USER: "{{ POSTGRES_USER }}"
            POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"

            CELERY_BROKER_URL: "{{ CELERY_BROKER_URL }}"
            CELERY_RESULT_BACKEND: "{{ CELERY_RESULT_BACKEND }}"

            MINIO_ENDPOINT: "{{ MINIO_ENDPOINT }}"
            MINIO_ROOT_USER: "{{ MINIO_ROOT_USER }}"
            MINIO_ROOT_PASSWORD: "{{ MINIO_ROOT_PASSWORD }}"
            MINIO_BUCKET_NAME: "{{ MINIO_BUCKET_NAME }}"
            MINIO_BUCKET_VOICEOVER: "{{ MINIO_BUCKET_VOICEOVER }}"
            MINIO_BUCKET_PICTURE: "{{ MINIO_BUCKET_PICTURE }}"

            GPT_TOKEN: "{{ GPT_TOKEN }}"

            PIX_TOKEN: "{{ PIX_TOKEN }}"

            MINIO_HOST: "{{ MINIO_HOST }}"

            FASTAPI_SECRET: "{{ FASTAPI_SECRET }}"

          depends_on:
            - db
            - app
            - redis
          restart: always

        minio:
          image: minio/minio:latest
          command: server --console-address ":9001" /data/
          ports:
            - "127.0.0.1:9000:9000"
            - "127.0.0.1:9001:9001"
          environment:
            MINIO_ROOT_USER: "{{ MINIO_ROOT_USER }}"
            MINIO_ROOT_PASSWORD: "{{ MINIO_ROOT_PASSWORD }}"
          volumes:
            - minio-storage:/data
          restart: always

      volumes:
        minio-storage:

- 
  name: Prune everything
  become: true 
  community.docker.docker_prune:
    containers: true
    images: true
    networks: true
    volumes: false
    builder_cache: true 